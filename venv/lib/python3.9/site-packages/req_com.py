# Request_Commands for CFT from Samuel Zielke
# Erstellt: 06.02.2022
# ...

# Modul Import
from os import stat, system, name
from turtle import st
from colorama import Fore, Back, Style
import time
from yaml import load, Loader, dump
import requests



def clear():
      
    # for windows
    if name == 'nt':
        _ = system('cls')
  
    # for mac and linux(here, os.name is 'posix')
    else:
        _ = system('clear')



def initialiserung():
    
    clear()
    settings = []
    print()
    print(Fore.WHITE + '----------------------------')
    print(Fore.WHITE + 'OCTOPRINT-CFT from M0nk3y500')
    # time.sleep(0.2)
    print(Fore.WHITE + 'Version 0.1 - 06.02.2022')
    # time.sleep(0.2)
    print(Fore.WHITE + '----------------------------\n')
    time.sleep(0.5)
    print(Fore.YELLOW + 'Modul: "req_com" erfolgreich importiert')
    # time.sleep(0.2)
    print("\nÜberprüfe Einstellungen ...\n")
    # time.sleep(0.2)

    checkSettings()
    time.sleep(0.2)

    shellyCheck()
    time.sleep(0.5)

    print(Fore.YELLOW + "\nÜberprüfe Verbindung ...")
    time.sleep(0.2)

    connectionCheck()

    return True
    

def shellyCheck():

    with open("config.yml", "r") as ymlfile:
        cfg = load(ymlfile, Loader=Loader)

    if cfg["shelly"] == True:
    
        print(Fore.WHITE + "\n\U0001F50C -> Sheely Funktion Aktiv")

        if shellystate():
            print(Fore.GREEN + "\U0001F50C -> Sheely Eingeschaltet")
        else:
            print(Fore.RED + "\U0001F50C -> Sheely Ausgeschaltet")
            print("\nProzess nach Fehler beendet\nSchalte erst deinen Drucker ein!")
            wahl = input(Fore.BLACK + Back.WHITE + "\nJetzt Shelly einschalten? [j/n]\n" + Fore.WHITE + Back.BLACK)
            if wahl == "j":
                requests.get("http://" + cfg["shelly-host"] + "/relay/0?turn=on")
                print("bitte warten... (5 sek)")
                time.sleep(5)
                # OctoConnectToPrinter()
                # time.sleep(7)
                # initialiserung()

            else:
                clear()
                a = Fore.RED + "\n\U0001F534 SHELLY"
                a += "\nDer Shelly muss eingeschaltet sein!\n"
                a += "Falls kein Shelly verbaut, in config = false"
                a += "\nProzess nach Fehler beendet"

                print(a)
                exit()

    else:
        print(Fore.WHITE + "\n\U0001F50C -> Sheely Funktion inaktiv")

def status():
    print()
    print(Fore.BLACK + Back.WHITE + 'Aktueller Status des Druckers:')
    return Fore.WHITE + Back.BLACK + "\U0001F449 " + Fore.GREEN + Back.BLACK + "STATUS"



def checkSettings():
    with open("config.yml", "r") as ymlfile:
        cfg = load(ymlfile, Loader=Loader)


    SettingCheckResult = ""
    MyErrorLog = []

    if cfg["host"] == None:
        # SettingCheckResult += Fore.RED + "\n\U0001F5A8  -> " + "HOST EMPTY!"
        print(Fore.RED + "\U0001F5A8  -> " + "HOST EMPTY!")
        MyErrorLog.append("host")
    else:
        # SettingCheckResult += Fore.WHITE + "\n\U0001F5A8  -> " + con_settings["host"]
        print(Fore.WHITE + "\U0001F5A8  -> " + cfg["host"])

    if cfg["port"] == None:
        # SettingCheckResult += Fore.RED + "\n\U0001F522 -> " + "PORT EMPTY!"
        print(Fore.RED + "\U0001F522 -> " + "PORT EMPTY!")
        MyErrorLog.append("port")
    else:
        # SettingCheckResult += Fore.WHITE + "\n\U0001F522 -> " + str(con_settings["port"])
        print(Fore.WHITE + "\U0001F522 -> " + str(cfg["port"]))

    if cfg["api-key"] == None:
        # SettingCheckResult += Fore.RED + "\n\U0001F511 -> " + "API-KEY EMPTY!"
        print(Fore.RED + "\U0001F511 -> " + "API-KEY EMPTY!")
        MyErrorLog.append("api-key")
    else:
        # SettingCheckResult += Fore.WHITE + "\n\U0001F511 -> " + con_settings["api-key"]
        print(Fore.WHITE + "\U0001F511 -> " + cfg["api-key"])
    
    
    if len(MyErrorLog) > 0:
           
        for error in MyErrorLog:
            question = input(Fore.BLACK + Back.WHITE + "\nJetzt neuen " + error + " eingeben [j/n]?" + Fore.WHITE + Back.BLACK + "\n>")
            if question == "j":
                newData = input(Fore.BLACK + Back.WHITE + "\nJetzt neue " + error + "-Daten eingeben:" + Fore.WHITE + Back.BLACK + "\n>")
                with open('config.yml') as f:
                    settings = load(f, Loader=Loader)

                if error == "port":
                    newData = int(newData)

                settings[error] = newData

                with open('config.yml', 'w') as f:
                    dump(settings, f)

            elif question == "n": 
                clear()
                a = Fore.RED + "\n\U0001F534 EINSTELLUNGEN"
                a += "\nError with settings of: " + str(MyErrorLog) + "\n"
                a += "\nProzess nach Fehler beendet"

                print(a)
                exit()

            else:
                clear()
                print(Fore.RED + "Eingabe Ungültig! Bitte erneut starten und eingeben!")
                exit()

        # initialiserung()

    else: 
        a= Fore.GREEN + "\n\U0001F44C EINSTELLUNGEN"
        print(a)

    
def connectionCheck():
    with open("config.yml", "r") as ymlfile:
        config = load(ymlfile, Loader=Loader)

    host = config["host"]
    apikey = config["api-key"]
    port = config["port"]
    try:
        status = requests.get('http://' + host + ':' +  str(port) + '/api/printer?apikey=' + apikey)
        code = status.status_code
        if code == 200:
            status = status.json()
            status = status["state"]
            if status["text"] == "Operational":
                MyColor = Fore.GREEN
            elif status["text"] == "Printing":
                MyColor = Fore.BLUE
            else:
                MyColor = Fore.WHITE
            print(Fore.WHITE + "\nHOST -> " + Fore.GREEN + "Verbunden")
            # time.sleep(0.2)
            print(Fore.WHITE + "APIKEY -> " + Fore.GREEN + "Richtig")
            # time.sleep(0.2)
            print(Fore.WHITE + "STATUS -> " + MyColor + status["text"])
            # time.sleep(0.2)
            print(Fore.GREEN + "\n\U0001F44C VERBINDUNG")
        elif code == 403:
            print(Fore.WHITE + "\nHOST -> " + Fore.GREEN + "Verbunden")
            # time.sleep(0.2)
            print(Fore.WHITE + "APIKEY -> " + Fore.RED + "Ungültig")
            # time.sleep(0.2)
            print(Fore.WHITE + "STATUS -> " + Fore.RED + "Nicht Verbunden")
            # time.sleep(0.2)
            a = Fore.RED + "\n\U0001F534 VERBINDUNG"
            a += "\nZUGRIFF VERWEIGERT" + "\n"
            a += "\nProzess nach Fehler beendet"
            print(a)
            exit()
        elif code == 409:
            print(Fore.WHITE + "\nHOST -> " + Fore.GREEN + "Verbunden")
            # time.sleep(0.2)
            print(Fore.WHITE + "APIKEY -> " + Fore.GREEN + "Richtig")
            # time.sleep(0.2)
            print(Fore.WHITE + "STATUS -> " + Fore.RED + "Nicht Verbunden")
            # time.sleep(0.2)
            want_connect = input(Fore.BLACK + Back.WHITE + "\nJetzt Drucker verbinden? [j/n]" + Fore.WHITE + Back.BLACK + "\n>")
            if want_connect == "j":
                OctoConnectToPrinter()
                print("bitte warten... (10 sek)")
                time.sleep(10)
                initialiserung()
            else:
                a = Fore.YELLOW + "\n\U0001F7E1 VERBINDUNG"
                a += "\nOctopi hat keine Verbindung zum Drucker" + "\n"
                a += Fore.RED + "\nProzess nach Fehler beendet\nVerbinde erst Octopi mit deinem Drucker!"
                print(a)
                exit()
    except requests.exceptions.RequestException as e:  # This is the correct syntax
        print(Fore.RED + "Fehler mit der Octopi-Verbindung!\nProzess nach einem Fehler beendet.")
        clear()
        a = Fore.RED + "\n\U0001F534 Octopi-Connection\n"
        a += "\nFehler mit Octopi Verbindung!"
        a += "\nProzess nach Fehler beendet"
        print(a)
        exit()


def shellystate():
    with open("config.yml", "r") as ymlfile:
        config = load(ymlfile, Loader=Loader)
    
    host = config["shelly-host"]

    try:
        status = requests.get('http://' + host + '/status')
        status = status.json()
        status = status["meters"]
        status = status[0]
        status = round(status["power"])
        if int(status) > 0:
            status = True
        elif int(status) == 0:
            status = False
        else:
            clear()
            print(Fore.RED + "\nError with Shelly\nProzess nach Fehler beendet.")
            exit()
        return status
    except requests.exceptions.RequestException as e:  # This is the correct syntax
        print(Fore.RED + "Fehler mit der Shelly-Verbindung!\nProzess nach einem Fehler beendet.")
        clear()
        a = Fore.RED + "\n\U0001F534 SHELLY"
        a += "\nFehler mit Shelly Verbindung!\n"
        a += "Falls kein Shelly verbaut, in config = false"
        a += "\nProzess nach Fehler beendet"
        print(a)
        exit()

def OctoConnectToPrinter():
    with open("config.yml", "r") as ymlfile:
        config = load(ymlfile, Loader=Loader)
    
    host = config["host"]
    apikey = config["api-key"]

    try:

        ReSes = requests.Session()
        ReSes.headers.update({'X-Api-Key': apikey,
                               'Content-Type': 'application/json'})
        data = {'command': 'connect'}
        r = ReSes.post('http://' + host + '/api/connection', json=data)
        if r.status_code != 204:
            raise Exception("Error: {code} - {content}".format(code=r.status_code, content=r.content.decode('utf-8')))
        # header = {'X-Api-Key':apikey, 'Content-Type': 'application/json' }
        # payload = {'"command": "connect", "port": "/dev/ttyUSB0", "baudrate": 115200, "printerProfile": "A10-DAFD", "save": true, "autoconnect": true'}
        # status = requests.post('http://' + host + '/api/connection',headers=header, json=payload)
        # status = status.json()
        ReSes.close()
    except requests.exceptions.RequestException as e:
        print(Fore.RED + "Fehler mit der Octopi-Verbindung!\nProzess nach einem Fehler beendet.")

    # Am ENDE
    #  + "\n\n" + '----------------------------\n'